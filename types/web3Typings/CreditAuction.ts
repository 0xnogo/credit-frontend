/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AuctionCleared = ContractEventLog<{
  soldAuctioningTokens: string;
  soldBiddingTokens: string;
  clearingPriceOrder: string;
  0: string;
  1: string;
  2: string;
}>;
export type AuctionProcessed = ContractEventLog<{
  auctioningTokenSoldAmount: string;
  biddingTokenReceivedAmount: string;
  0: string;
  1: string;
}>;
export type CancellationSellOrder = ContractEventLog<{
  userId: string;
  buyAmount: string;
  sellAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type ClaimedFromOrder = ContractEventLog<{
  userId: string;
  buyAmount: string;
  sellAmount: string;
  referralCode: string;
  referralFee: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type NewSellOrder = ContractEventLog<{
  userId: string;
  buyAmount: string;
  sellAmount: string;
  referralCode: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type NewUser = ContractEventLog<{
  userId: string;
  userAddress: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type UserRegistration = ContractEventLog<{
  user: string;
  userId: string;
  0: string;
  1: string;
}>;
export type WinningOrder = ContractEventLog<{
  user: string;
  userAddress: string;
  sumAuctioningTokenAmount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface CreditAuction extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): CreditAuction;
  clone(): CreditAuction;
  methods: {
    FEE_DENOMINATOR(): NonPayableTransactionObject<string>;

    auctionData(): NonPayableTransactionObject<{
      biddingToken: string;
      orderCancellationEndDate: string;
      auctionEndDate: string;
      initialAuctionOrder: string;
      minimumBiddingAmountPerOrder: string;
      interimSumBidAmount: string;
      interimOrder: string;
      clearingPriceOrder: string;
      volumeClearingPriceOrder: string;
      minFundingThresholdNotReached: boolean;
      minFundingThreshold: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: boolean;
      10: string;
    }>;

    cancelSellOrders(
      _sellOrders: (string | number[])[]
    ): NonPayableTransactionObject<void>;

    claimFromParticipantOrder(
      orders: (string | number[])[]
    ): NonPayableTransactionObject<{
      sumAuctioningTokenAmount: string;
      sumBiddingTokenAmount: string;
      0: string;
      1: string;
    }>;

    containsOrder(
      order: string | number[]
    ): NonPayableTransactionObject<boolean>;

    getSecondsRemainingInBatch(): NonPayableTransactionObject<string>;

    getUserId(user: string): NonPayableTransactionObject<string>;

    numUsers(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    placeSellOrders(
      _minBuyAmounts: (number | string | BN)[],
      _sellAmounts: (number | string | BN)[],
      _prevSellOrders: (string | number[])[],
      referralCode: string
    ): NonPayableTransactionObject<string>;

    placeSellOrdersOnBehalf(
      _minBuyAmounts: (number | string | BN)[],
      _sellAmounts: (number | string | BN)[],
      _prevSellOrders: (string | number[])[],
      orderSubmitter: string,
      referralCode: string
    ): NonPayableTransactionObject<string>;

    precalculateSellAmountSum(
      iterationSteps: number | string | BN
    ): NonPayableTransactionObject<void>;

    referralFeeNumerator(): NonPayableTransactionObject<string>;

    referralRewardAmount(): NonPayableTransactionObject<string>;

    referralRewardManager(): NonPayableTransactionObject<string>;

    referrals(arg0: string | number[]): NonPayableTransactionObject<string>;

    registerUser(user: string): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setReferralFeeNumerator(
      newFeeNumerator: number | string | BN
    ): NonPayableTransactionObject<void>;

    settleAuction(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    AuctionCleared(cb?: Callback<AuctionCleared>): EventEmitter;
    AuctionCleared(
      options?: EventOptions,
      cb?: Callback<AuctionCleared>
    ): EventEmitter;

    AuctionProcessed(cb?: Callback<AuctionProcessed>): EventEmitter;
    AuctionProcessed(
      options?: EventOptions,
      cb?: Callback<AuctionProcessed>
    ): EventEmitter;

    CancellationSellOrder(cb?: Callback<CancellationSellOrder>): EventEmitter;
    CancellationSellOrder(
      options?: EventOptions,
      cb?: Callback<CancellationSellOrder>
    ): EventEmitter;

    ClaimedFromOrder(cb?: Callback<ClaimedFromOrder>): EventEmitter;
    ClaimedFromOrder(
      options?: EventOptions,
      cb?: Callback<ClaimedFromOrder>
    ): EventEmitter;

    NewSellOrder(cb?: Callback<NewSellOrder>): EventEmitter;
    NewSellOrder(
      options?: EventOptions,
      cb?: Callback<NewSellOrder>
    ): EventEmitter;

    NewUser(cb?: Callback<NewUser>): EventEmitter;
    NewUser(options?: EventOptions, cb?: Callback<NewUser>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    UserRegistration(cb?: Callback<UserRegistration>): EventEmitter;
    UserRegistration(
      options?: EventOptions,
      cb?: Callback<UserRegistration>
    ): EventEmitter;

    WinningOrder(cb?: Callback<WinningOrder>): EventEmitter;
    WinningOrder(
      options?: EventOptions,
      cb?: Callback<WinningOrder>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AuctionCleared", cb: Callback<AuctionCleared>): void;
  once(
    event: "AuctionCleared",
    options: EventOptions,
    cb: Callback<AuctionCleared>
  ): void;

  once(event: "AuctionProcessed", cb: Callback<AuctionProcessed>): void;
  once(
    event: "AuctionProcessed",
    options: EventOptions,
    cb: Callback<AuctionProcessed>
  ): void;

  once(
    event: "CancellationSellOrder",
    cb: Callback<CancellationSellOrder>
  ): void;
  once(
    event: "CancellationSellOrder",
    options: EventOptions,
    cb: Callback<CancellationSellOrder>
  ): void;

  once(event: "ClaimedFromOrder", cb: Callback<ClaimedFromOrder>): void;
  once(
    event: "ClaimedFromOrder",
    options: EventOptions,
    cb: Callback<ClaimedFromOrder>
  ): void;

  once(event: "NewSellOrder", cb: Callback<NewSellOrder>): void;
  once(
    event: "NewSellOrder",
    options: EventOptions,
    cb: Callback<NewSellOrder>
  ): void;

  once(event: "NewUser", cb: Callback<NewUser>): void;
  once(event: "NewUser", options: EventOptions, cb: Callback<NewUser>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "UserRegistration", cb: Callback<UserRegistration>): void;
  once(
    event: "UserRegistration",
    options: EventOptions,
    cb: Callback<UserRegistration>
  ): void;

  once(event: "WinningOrder", cb: Callback<WinningOrder>): void;
  once(
    event: "WinningOrder",
    options: EventOptions,
    cb: Callback<WinningOrder>
  ): void;
}
