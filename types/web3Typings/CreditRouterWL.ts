/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdminChanged = ContractEventLog<{
  previousAdmin: string;
  newAdmin: string;
  0: string;
  1: string;
}>;
export type BeaconUpgraded = ContractEventLog<{
  beacon: string;
  0: string;
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Upgraded = ContractEventLog<{
  implementation: string;
  0: string;
}>;

export interface CreditRouterWL extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): CreditRouterWL;
  clone(): CreditRouterWL;
  methods: {
    borrowGivenPercent(
      params: [
        string,
        string,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): NonPayableTransactionObject<{
      assetOut: string;
      id: string;
      dueOut: [string, string, string];
      0: string;
      1: string;
      2: [string, string, string];
    }>;

    borrowGivenPercentETHAsset(
      params: [
        string,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): NonPayableTransactionObject<{
      assetOut: string;
      id: string;
      dueOut: [string, string, string];
      0: string;
      1: string;
      2: [string, string, string];
    }>;

    borrowGivenPercentETHCollateral(
      params: [
        string,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): PayableTransactionObject<{
      assetOut: string;
      id: string;
      dueOut: [string, string, string];
      0: string;
      1: string;
      2: [string, string, string];
    }>;

    collect(
      params: [
        string,
        string,
        number | string | BN,
        string,
        string,
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): NonPayableTransactionObject<[string, string]>;

    collectETHAsset(
      params: [
        string,
        number | string | BN,
        string,
        string,
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): NonPayableTransactionObject<[string, string]>;

    collectETHCollateral(
      params: [
        string,
        number | string | BN,
        string,
        string,
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): NonPayableTransactionObject<[string, string]>;

    creditBorrowCallback(
      collateralIn: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    creditLendCallback(
      assetIn: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    creditMintCallback(
      assetIn: number | string | BN,
      collateralIn: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    creditPayCallback(
      assetIn: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    creditPositionManager(): NonPayableTransactionObject<string>;

    deployPair(params: [string, string]): NonPayableTransactionObject<void>;

    factory(): NonPayableTransactionObject<string>;

    initialize(
      _factory: string,
      _weth: string,
      _creditPositionManager: string
    ): NonPayableTransactionObject<void>;

    lendGivenPercent(
      params: [
        string,
        string,
        number | string | BN,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): NonPayableTransactionObject<{
      assetIn: string;
      claimsOut: [string, string, string, string];
      0: string;
      1: [string, string, string, string];
    }>;

    lendGivenPercentETHAsset(
      params: [
        string,
        number | string | BN,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): PayableTransactionObject<{
      assetIn: string;
      claimsOut: [string, string, string, string];
      0: string;
      1: [string, string, string, string];
    }>;

    lendGivenPercentETHCollateral(
      params: [
        string,
        number | string | BN,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): NonPayableTransactionObject<{
      assetIn: string;
      claimsOut: [string, string, string, string];
      0: string;
      1: [string, string, string, string];
    }>;

    liquidityGivenAsset(
      params: [
        string,
        string,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): NonPayableTransactionObject<{
      assetIn: string;
      liquidityOut: string;
      id: string;
      dueOut: [string, string, string];
      0: string;
      1: string;
      2: string;
      3: [string, string, string];
    }>;

    liquidityGivenAssetETHAsset(
      params: [
        string,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): PayableTransactionObject<{
      assetIn: string;
      liquidityOut: string;
      id: string;
      dueOut: [string, string, string];
      0: string;
      1: string;
      2: string;
      3: [string, string, string];
    }>;

    liquidityGivenAssetETHCollateral(
      params: [
        string,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): PayableTransactionObject<{
      assetIn: string;
      liquidityOut: string;
      id: string;
      dueOut: [string, string, string];
      0: string;
      1: string;
      2: string;
      3: [string, string, string];
    }>;

    liquidityGivenCollateral(
      params: [
        string,
        string,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): NonPayableTransactionObject<{
      assetIn: string;
      liquidityOut: string;
      id: string;
      dueOut: [string, string, string];
      0: string;
      1: string;
      2: string;
      3: [string, string, string];
    }>;

    liquidityGivenCollateralETHAsset(
      params: [
        string,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): PayableTransactionObject<{
      assetIn: string;
      liquidityOut: string;
      id: string;
      dueOut: [string, string, string];
      0: string;
      1: string;
      2: string;
      3: [string, string, string];
    }>;

    liquidityGivenCollateralETHCollateral(
      params: [
        string,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): PayableTransactionObject<{
      assetIn: string;
      liquidityOut: string;
      id: string;
      dueOut: [string, string, string];
      0: string;
      1: string;
      2: string;
      3: [string, string, string];
    }>;

    merkleRoot(): NonPayableTransactionObject<string>;

    newLiquidity(
      params: [
        string,
        string,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<{
      assetIn: string;
      liquidityOut: string;
      id: string;
      dueOut: [string, string, string];
      0: string;
      1: string;
      2: string;
      3: [string, string, string];
    }>;

    newLiquidityETHAsset(
      params: [
        string,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): PayableTransactionObject<{
      assetIn: string;
      liquidityOut: string;
      id: string;
      dueOut: [string, string, string];
      0: string;
      1: string;
      2: string;
      3: [string, string, string];
    }>;

    newLiquidityETHCollateral(
      params: [
        string,
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): PayableTransactionObject<{
      assetIn: string;
      liquidityOut: string;
      id: string;
      dueOut: [string, string, string];
      0: string;
      1: string;
      2: string;
      3: [string, string, string];
    }>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: number | string | BN,
      arg3: string | number[]
    ): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    proxiableUUID(): NonPayableTransactionObject<string>;

    removeLiquidity(
      params: [
        string,
        string,
        number | string | BN,
        string,
        string,
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): NonPayableTransactionObject<{
      assetOut: string;
      collateralOut: string;
      0: string;
      1: string;
    }>;

    removeLiquidityETHAsset(
      params: [
        string,
        number | string | BN,
        string,
        string,
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): NonPayableTransactionObject<{
      assetOut: string;
      collateralOut: string;
      0: string;
      1: string;
    }>;

    removeLiquidityETHCollateral(
      params: [
        string,
        number | string | BN,
        string,
        string,
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): NonPayableTransactionObject<{
      assetOut: string;
      collateralOut: string;
      0: string;
      1: string;
    }>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    repay(
      params: [
        string,
        string,
        number | string | BN,
        string,
        (number | string | BN)[],
        (number | string | BN)[],
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): NonPayableTransactionObject<{
      assetIn: string;
      collateralOut: string;
      creditPositionFullyPaid: string[];
      0: string;
      1: string;
      2: string[];
    }>;

    repayETHAsset(
      params: [
        string,
        number | string | BN,
        string,
        (number | string | BN)[],
        (number | string | BN)[],
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): PayableTransactionObject<{
      assetIn: string;
      collateralOut: string;
      creditPositionFullyPaid: string[];
      0: string;
      1: string;
      2: string[];
    }>;

    repayETHCollateral(
      params: [
        string,
        number | string | BN,
        string,
        (number | string | BN)[],
        (number | string | BN)[],
        number | string | BN
      ],
      _merkleProof: (string | number[])[]
    ): NonPayableTransactionObject<{
      assetIn: string;
      collateralOut: string;
      creditPositionFullyPaid: string[];
      0: string;
      1: string;
      2: string[];
    }>;

    setMerkleRoot(
      _merkleRoot: string | number[]
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    upgradeTo(newImplementation: string): NonPayableTransactionObject<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: string | number[]
    ): PayableTransactionObject<void>;

    weth(): NonPayableTransactionObject<string>;
  };
  events: {
    AdminChanged(cb?: Callback<AdminChanged>): EventEmitter;
    AdminChanged(
      options?: EventOptions,
      cb?: Callback<AdminChanged>
    ): EventEmitter;

    BeaconUpgraded(cb?: Callback<BeaconUpgraded>): EventEmitter;
    BeaconUpgraded(
      options?: EventOptions,
      cb?: Callback<BeaconUpgraded>
    ): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Upgraded(cb?: Callback<Upgraded>): EventEmitter;
    Upgraded(options?: EventOptions, cb?: Callback<Upgraded>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AdminChanged", cb: Callback<AdminChanged>): void;
  once(
    event: "AdminChanged",
    options: EventOptions,
    cb: Callback<AdminChanged>
  ): void;

  once(event: "BeaconUpgraded", cb: Callback<BeaconUpgraded>): void;
  once(
    event: "BeaconUpgraded",
    options: EventOptions,
    cb: Callback<BeaconUpgraded>
  ): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Upgraded", cb: Callback<Upgraded>): void;
  once(event: "Upgraded", options: EventOptions, cb: Callback<Upgraded>): void;
}
