/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdminChanged = ContractEventLog<{
  previousAdmin: string;
  newAdmin: string;
  0: string;
  1: string;
}>;
export type BeaconUpgraded = ContractEventLog<{
  beacon: string;
  0: string;
}>;
export type CycleDividendsPercentUpdated = ContractEventLog<{
  token: string;
  previousValue: string;
  newValue: string;
  0: string;
  1: string;
  2: string;
}>;
export type DistributedTokenDisabled = ContractEventLog<{
  token: string;
  0: string;
}>;
export type DistributedTokenEnabled = ContractEventLog<{
  token: string;
  0: string;
}>;
export type DistributedTokenRemoved = ContractEventLog<{
  token: string;
  0: string;
}>;
export type DividendsAddedToPending = ContractEventLog<{
  token: string;
  amount: string;
  0: string;
  1: string;
}>;
export type DividendsCollected = ContractEventLog<{
  user: string;
  token: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type DividendsUpdated = ContractEventLog<{
  token: string;
  currentStartTimestamp: string;
  0: string;
  1: string;
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type UpdatedCurrentCycleStartTime = ContractEventLog<{
  0: string;
}>;
export type Upgraded = ContractEventLog<{
  implementation: string;
  0: string;
}>;
export type UserUpdated = ContractEventLog<{
  user: string;
  previousBalance: string;
  newBalance: string;
  newTotalAllocation: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface CreditStaking extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): CreditStaking;
  clone(): CreditStaking;
  methods: {
    MAX_DISTRIBUTED_TOKENS(): NonPayableTransactionObject<string>;

    addDividendsToPending(
      token: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    creditToken(): NonPayableTransactionObject<string>;

    currentCycleStartTime(): NonPayableTransactionObject<string>;

    cycleDurationSeconds(): NonPayableTransactionObject<string>;

    disableDistributedToken(token: string): NonPayableTransactionObject<void>;

    distributedToken(
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    distributedTokens(): NonPayableTransactionObject<string[]>;

    distributedTokensLength(): NonPayableTransactionObject<string>;

    dividendsInfo(arg0: string): NonPayableTransactionObject<{
      currentDistributionAmount: string;
      currentCycleDistributedAmount: string;
      pendingAmount: string;
      distributedAmount: string;
      accDividendsPerShare: string;
      lastUpdateTime: string;
      distributionDisabled: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: boolean;
    }>;

    emergencyWithdraw(token: string): NonPayableTransactionObject<void>;

    emergencyWithdrawAll(): NonPayableTransactionObject<void>;

    enableDistributedToken(token: string): NonPayableTransactionObject<void>;

    harvestAllDividends(
      _nativeToken: boolean
    ): NonPayableTransactionObject<void>;

    harvestDividends(
      token: string,
      _nativeToken: boolean
    ): NonPayableTransactionObject<void>;

    initialize(
      creditToken_: string,
      startTime_: number | string | BN,
      cycleDurationSeconds_: number | string | BN,
      unstakingPenalties_: (number | string | BN)[],
      treasury_: string,
      weth_: string
    ): NonPayableTransactionObject<void>;

    isDistributedToken(token: string): NonPayableTransactionObject<boolean>;

    massUpdateDividendsInfo(): NonPayableTransactionObject<void>;

    nextCycleStartTime(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    pendingDividendsAmount(
      token: string,
      userAddress: string
    ): NonPayableTransactionObject<string>;

    proxiableUUID(): NonPayableTransactionObject<string>;

    removeTokenFromDistributedTokens(
      tokenToRemove: string
    ): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setDistributor(distributor_: string): NonPayableTransactionObject<void>;

    setUnstakingPenalties(
      unstakingPenalties_: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    stake(amount: number | string | BN): NonPayableTransactionObject<void>;

    totalAllocation(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unstake(amount: number | string | BN): NonPayableTransactionObject<void>;

    unstakingPenalties(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    updateCurrentCycleStartTime(): NonPayableTransactionObject<void>;

    updateDividendsInfo(token: string): NonPayableTransactionObject<void>;

    upgradeTo(newImplementation: string): NonPayableTransactionObject<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: string | number[]
    ): PayableTransactionObject<void>;

    users(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<{
      pendingDividends: string;
      rewardDebt: string;
      0: string;
      1: string;
    }>;

    usersAllocation(arg0: string): NonPayableTransactionObject<string>;

    weth(): NonPayableTransactionObject<string>;
  };
  events: {
    AdminChanged(cb?: Callback<AdminChanged>): EventEmitter;
    AdminChanged(
      options?: EventOptions,
      cb?: Callback<AdminChanged>
    ): EventEmitter;

    BeaconUpgraded(cb?: Callback<BeaconUpgraded>): EventEmitter;
    BeaconUpgraded(
      options?: EventOptions,
      cb?: Callback<BeaconUpgraded>
    ): EventEmitter;

    CycleDividendsPercentUpdated(
      cb?: Callback<CycleDividendsPercentUpdated>
    ): EventEmitter;
    CycleDividendsPercentUpdated(
      options?: EventOptions,
      cb?: Callback<CycleDividendsPercentUpdated>
    ): EventEmitter;

    DistributedTokenDisabled(
      cb?: Callback<DistributedTokenDisabled>
    ): EventEmitter;
    DistributedTokenDisabled(
      options?: EventOptions,
      cb?: Callback<DistributedTokenDisabled>
    ): EventEmitter;

    DistributedTokenEnabled(
      cb?: Callback<DistributedTokenEnabled>
    ): EventEmitter;
    DistributedTokenEnabled(
      options?: EventOptions,
      cb?: Callback<DistributedTokenEnabled>
    ): EventEmitter;

    DistributedTokenRemoved(
      cb?: Callback<DistributedTokenRemoved>
    ): EventEmitter;
    DistributedTokenRemoved(
      options?: EventOptions,
      cb?: Callback<DistributedTokenRemoved>
    ): EventEmitter;

    DividendsAddedToPending(
      cb?: Callback<DividendsAddedToPending>
    ): EventEmitter;
    DividendsAddedToPending(
      options?: EventOptions,
      cb?: Callback<DividendsAddedToPending>
    ): EventEmitter;

    DividendsCollected(cb?: Callback<DividendsCollected>): EventEmitter;
    DividendsCollected(
      options?: EventOptions,
      cb?: Callback<DividendsCollected>
    ): EventEmitter;

    DividendsUpdated(cb?: Callback<DividendsUpdated>): EventEmitter;
    DividendsUpdated(
      options?: EventOptions,
      cb?: Callback<DividendsUpdated>
    ): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    UpdatedCurrentCycleStartTime(
      cb?: Callback<UpdatedCurrentCycleStartTime>
    ): EventEmitter;
    UpdatedCurrentCycleStartTime(
      options?: EventOptions,
      cb?: Callback<UpdatedCurrentCycleStartTime>
    ): EventEmitter;

    Upgraded(cb?: Callback<Upgraded>): EventEmitter;
    Upgraded(options?: EventOptions, cb?: Callback<Upgraded>): EventEmitter;

    UserUpdated(cb?: Callback<UserUpdated>): EventEmitter;
    UserUpdated(
      options?: EventOptions,
      cb?: Callback<UserUpdated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AdminChanged", cb: Callback<AdminChanged>): void;
  once(
    event: "AdminChanged",
    options: EventOptions,
    cb: Callback<AdminChanged>
  ): void;

  once(event: "BeaconUpgraded", cb: Callback<BeaconUpgraded>): void;
  once(
    event: "BeaconUpgraded",
    options: EventOptions,
    cb: Callback<BeaconUpgraded>
  ): void;

  once(
    event: "CycleDividendsPercentUpdated",
    cb: Callback<CycleDividendsPercentUpdated>
  ): void;
  once(
    event: "CycleDividendsPercentUpdated",
    options: EventOptions,
    cb: Callback<CycleDividendsPercentUpdated>
  ): void;

  once(
    event: "DistributedTokenDisabled",
    cb: Callback<DistributedTokenDisabled>
  ): void;
  once(
    event: "DistributedTokenDisabled",
    options: EventOptions,
    cb: Callback<DistributedTokenDisabled>
  ): void;

  once(
    event: "DistributedTokenEnabled",
    cb: Callback<DistributedTokenEnabled>
  ): void;
  once(
    event: "DistributedTokenEnabled",
    options: EventOptions,
    cb: Callback<DistributedTokenEnabled>
  ): void;

  once(
    event: "DistributedTokenRemoved",
    cb: Callback<DistributedTokenRemoved>
  ): void;
  once(
    event: "DistributedTokenRemoved",
    options: EventOptions,
    cb: Callback<DistributedTokenRemoved>
  ): void;

  once(
    event: "DividendsAddedToPending",
    cb: Callback<DividendsAddedToPending>
  ): void;
  once(
    event: "DividendsAddedToPending",
    options: EventOptions,
    cb: Callback<DividendsAddedToPending>
  ): void;

  once(event: "DividendsCollected", cb: Callback<DividendsCollected>): void;
  once(
    event: "DividendsCollected",
    options: EventOptions,
    cb: Callback<DividendsCollected>
  ): void;

  once(event: "DividendsUpdated", cb: Callback<DividendsUpdated>): void;
  once(
    event: "DividendsUpdated",
    options: EventOptions,
    cb: Callback<DividendsUpdated>
  ): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(
    event: "UpdatedCurrentCycleStartTime",
    cb: Callback<UpdatedCurrentCycleStartTime>
  ): void;
  once(
    event: "UpdatedCurrentCycleStartTime",
    options: EventOptions,
    cb: Callback<UpdatedCurrentCycleStartTime>
  ): void;

  once(event: "Upgraded", cb: Callback<Upgraded>): void;
  once(event: "Upgraded", options: EventOptions, cb: Callback<Upgraded>): void;

  once(event: "UserUpdated", cb: Callback<UserUpdated>): void;
  once(
    event: "UserUpdated",
    options: EventOptions,
    cb: Callback<UserUpdated>
  ): void;
}
