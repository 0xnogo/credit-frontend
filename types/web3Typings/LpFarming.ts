/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdminChanged = ContractEventLog<{
  previousAdmin: string;
  newAdmin: string;
  0: string;
  1: string;
}>;
export type BeaconUpgraded = ContractEventLog<{
  beacon: string;
  0: string;
}>;
export type Deposit = ContractEventLog<{
  user: string;
  poolHash: string;
  collateralPositionId: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type EmergencyWithdraw = ContractEventLog<{
  user: string;
  poolHash: string;
  amount: string;
  creditPositionIds: string[];
  0: string;
  1: string;
  2: string;
  3: string[];
}>;
export type Harvest = ContractEventLog<{
  user: string;
  poolHash: string;
  creditPositionId: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type LogPoolAddition = ContractEventLog<{
  poolHash: string;
  allocPoint: string;
  pair: string;
  maturity: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type LogPoolExpiration = ContractEventLog<{
  poolHash: string;
  0: string;
}>;
export type LogUpdatePool = ContractEventLog<{
  poolHash: string;
  lastRewardTime: string;
  lpSupply: string;
  accCreditPerShare: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Upgraded = ContractEventLog<{
  implementation: string;
  0: string;
}>;
export type Withdraw = ContractEventLog<{
  user: string;
  poolHash: string;
  collateralPositionId: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface LpFarming extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): LpFarming;
  clone(): LpFarming;
  methods: {
    addPool(
      _allocPoint: number | string | BN,
      _pair: string,
      _maturity: number | string | BN
    ): NonPayableTransactionObject<void>;

    creditPosition(): NonPayableTransactionObject<string>;

    creditToken(): NonPayableTransactionObject<string>;

    deposit(
      _poolHash: string | number[],
      _creditPositionId: number | string | BN
    ): NonPayableTransactionObject<void>;

    distributor(): NonPayableTransactionObject<string>;

    emergencyWithdraw(
      _poolHash: string | number[],
      _creditPositionIds: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    emissionRate(): NonPayableTransactionObject<string>;

    harvest(
      _poolHash: string | number[],
      _creditPositionId: number | string | BN
    ): NonPayableTransactionObject<void>;

    harvestAll(
      _poolHash: string | number[],
      _creditPositionIds: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    initialize(_creditToken: string): NonPayableTransactionObject<void>;

    isActivePool(
      _hash: string | number[]
    ): NonPayableTransactionObject<boolean>;

    markPoolInactive(
      _poolHash: string | number[]
    ): NonPayableTransactionObject<void>;

    massUpdatePools(): NonPayableTransactionObject<void>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: number | string | BN,
      arg3: string | number[]
    ): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    pendingCredit(
      _poolHash: string | number[],
      _user: string,
      _creditPositionId: number | string | BN
    ): NonPayableTransactionObject<string>;

    poolInfo(arg0: string | number[]): NonPayableTransactionObject<{
      allocPoint: string;
      lastRewardTime: string;
      accCreditPerShare: string;
      maturity: string;
      lpSupply: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    poolLength(): NonPayableTransactionObject<string>;

    positionInfo(
      arg0: string | number[],
      arg1: string,
      arg2: number | string | BN
    ): NonPayableTransactionObject<{
      amount: string;
      rewardDebt: string;
      0: string;
      1: string;
    }>;

    proxiableUUID(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setCreditPosition(
      _creditPosition: string
    ): NonPayableTransactionObject<void>;

    setDistributor(_distributor: string): NonPayableTransactionObject<void>;

    totalAllocPoint(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    updatePool(
      _poolHash: string | number[]
    ): NonPayableTransactionObject<[string, string, string, string, string]>;

    upgradeTo(newImplementation: string): NonPayableTransactionObject<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: string | number[]
    ): PayableTransactionObject<void>;

    withdraw(
      _poolHash: string | number[],
      _creditPositionId: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdrawAll(
      _poolHash: string | number[],
      _creditPositionIds: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    AdminChanged(cb?: Callback<AdminChanged>): EventEmitter;
    AdminChanged(
      options?: EventOptions,
      cb?: Callback<AdminChanged>
    ): EventEmitter;

    BeaconUpgraded(cb?: Callback<BeaconUpgraded>): EventEmitter;
    BeaconUpgraded(
      options?: EventOptions,
      cb?: Callback<BeaconUpgraded>
    ): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    EmergencyWithdraw(cb?: Callback<EmergencyWithdraw>): EventEmitter;
    EmergencyWithdraw(
      options?: EventOptions,
      cb?: Callback<EmergencyWithdraw>
    ): EventEmitter;

    Harvest(cb?: Callback<Harvest>): EventEmitter;
    Harvest(options?: EventOptions, cb?: Callback<Harvest>): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    LogPoolAddition(cb?: Callback<LogPoolAddition>): EventEmitter;
    LogPoolAddition(
      options?: EventOptions,
      cb?: Callback<LogPoolAddition>
    ): EventEmitter;

    LogPoolExpiration(cb?: Callback<LogPoolExpiration>): EventEmitter;
    LogPoolExpiration(
      options?: EventOptions,
      cb?: Callback<LogPoolExpiration>
    ): EventEmitter;

    LogUpdatePool(cb?: Callback<LogUpdatePool>): EventEmitter;
    LogUpdatePool(
      options?: EventOptions,
      cb?: Callback<LogUpdatePool>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Upgraded(cb?: Callback<Upgraded>): EventEmitter;
    Upgraded(options?: EventOptions, cb?: Callback<Upgraded>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AdminChanged", cb: Callback<AdminChanged>): void;
  once(
    event: "AdminChanged",
    options: EventOptions,
    cb: Callback<AdminChanged>
  ): void;

  once(event: "BeaconUpgraded", cb: Callback<BeaconUpgraded>): void;
  once(
    event: "BeaconUpgraded",
    options: EventOptions,
    cb: Callback<BeaconUpgraded>
  ): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "EmergencyWithdraw", cb: Callback<EmergencyWithdraw>): void;
  once(
    event: "EmergencyWithdraw",
    options: EventOptions,
    cb: Callback<EmergencyWithdraw>
  ): void;

  once(event: "Harvest", cb: Callback<Harvest>): void;
  once(event: "Harvest", options: EventOptions, cb: Callback<Harvest>): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "LogPoolAddition", cb: Callback<LogPoolAddition>): void;
  once(
    event: "LogPoolAddition",
    options: EventOptions,
    cb: Callback<LogPoolAddition>
  ): void;

  once(event: "LogPoolExpiration", cb: Callback<LogPoolExpiration>): void;
  once(
    event: "LogPoolExpiration",
    options: EventOptions,
    cb: Callback<LogPoolExpiration>
  ): void;

  once(event: "LogUpdatePool", cb: Callback<LogUpdatePool>): void;
  once(
    event: "LogUpdatePool",
    options: EventOptions,
    cb: Callback<LogUpdatePool>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Upgraded", cb: Callback<Upgraded>): void;
  once(event: "Upgraded", options: EventOptions, cb: Callback<Upgraded>): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
