/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdminChanged = ContractEventLog<{
  previousAdmin: string;
  newAdmin: string;
  0: string;
  1: string;
}>;
export type BeaconUpgraded = ContractEventLog<{
  beacon: string;
  0: string;
}>;
export type Claim = ContractEventLog<{
  claimant: string;
  amount: string;
  0: string;
  1: string;
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type Lock = ContractEventLog<{
  locker: string;
  amount: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Unlock = ContractEventLog<{
  unlocker: string;
  amount: string;
  0: string;
  1: string;
}>;
export type Upgraded = ContractEventLog<{
  implementation: string;
  0: string;
}>;

export interface AuctionClaimer extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): AuctionClaimer;
  clone(): AuctionClaimer;
  methods: {
    admin(): NonPayableTransactionObject<string>;

    claimCredit(
      _amount: number | string | BN,
      _proof: (string | number[])[]
    ): NonPayableTransactionObject<void>;

    creditStaking(): NonPayableTransactionObject<string>;

    creditToken(): NonPayableTransactionObject<string>;

    emergencyWithdraw(_tokens: string[]): PayableTransactionObject<void>;

    getReleasableAmount(
      _amount: number | string | BN,
      _to: string,
      _proof: (string | number[])[]
    ): NonPayableTransactionObject<string>;

    info(arg0: string): NonPayableTransactionObject<{
      claimedLaunchShare: boolean;
      vestingAmountClaimed: string;
      amountLocked: string;
      lockingTimestamp: string;
      0: boolean;
      1: string;
      2: string;
      3: string;
    }>;

    initialize(
      _merkleRoot: string | number[],
      _creditToken: string,
      _creditStaking: string,
      _treasury: string,
      _totalContractAllocation: number | string | BN
    ): NonPayableTransactionObject<void>;

    lockLaunchShare(
      _amount: number | string | BN,
      _proof: (string | number[])[]
    ): NonPayableTransactionObject<void>;

    lockerRewards(arg0: string): NonPayableTransactionObject<string>;

    lockingDecisionCutOff(): NonPayableTransactionObject<string>;

    merkleRoot(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    proxiableUUID(): NonPayableTransactionObject<string>;

    reducedCliffDuration(): NonPayableTransactionObject<string>;

    reducedCliffUnstake(): NonPayableTransactionObject<void>;

    reducedVestingEnd(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    rewardTokens(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    setAdmin(_newAdmin: string): NonPayableTransactionObject<void>;

    setLockingDecisionCutOff(
      _cutOff: number | string | BN
    ): NonPayableTransactionObject<void>;

    setRoot(_merkleRoot: string | number[]): NonPayableTransactionObject<void>;

    setUnstakeStatuses(
      _unstakedReducedCliffAmount: boolean,
      _unstakedStandardCliffAmount: boolean
    ): NonPayableTransactionObject<void>;

    stake(
      _reducedCliffDuration: number | string | BN,
      _standardCliffDuration: number | string | BN,
      _totalReducedVestingDuration: number | string | BN,
      _totalStandardVestingDuration: number | string | BN
    ): NonPayableTransactionObject<void>;

    standardCliffDuration(): NonPayableTransactionObject<string>;

    standardCliffUnstake(): NonPayableTransactionObject<void>;

    standardVestingEnd(): NonPayableTransactionObject<string>;

    totalClaimed(): NonPayableTransactionObject<string>;

    totalContractAllocation(): NonPayableTransactionObject<string>;

    totalLaunchShareLocked(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    treasury(): NonPayableTransactionObject<string>;

    unlockLaunchShare(
      _amount: number | string | BN,
      _proof: (string | number[])[]
    ): NonPayableTransactionObject<void>;

    unstakedReducedCliffAmount(): NonPayableTransactionObject<boolean>;

    unstakedStandardCliffAmount(): NonPayableTransactionObject<boolean>;

    upgradeTo(newImplementation: string): NonPayableTransactionObject<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: string | number[]
    ): PayableTransactionObject<void>;

    vestingStart(): NonPayableTransactionObject<string>;
  };
  events: {
    AdminChanged(cb?: Callback<AdminChanged>): EventEmitter;
    AdminChanged(
      options?: EventOptions,
      cb?: Callback<AdminChanged>
    ): EventEmitter;

    BeaconUpgraded(cb?: Callback<BeaconUpgraded>): EventEmitter;
    BeaconUpgraded(
      options?: EventOptions,
      cb?: Callback<BeaconUpgraded>
    ): EventEmitter;

    Claim(cb?: Callback<Claim>): EventEmitter;
    Claim(options?: EventOptions, cb?: Callback<Claim>): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    Lock(cb?: Callback<Lock>): EventEmitter;
    Lock(options?: EventOptions, cb?: Callback<Lock>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Unlock(cb?: Callback<Unlock>): EventEmitter;
    Unlock(options?: EventOptions, cb?: Callback<Unlock>): EventEmitter;

    Upgraded(cb?: Callback<Upgraded>): EventEmitter;
    Upgraded(options?: EventOptions, cb?: Callback<Upgraded>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AdminChanged", cb: Callback<AdminChanged>): void;
  once(
    event: "AdminChanged",
    options: EventOptions,
    cb: Callback<AdminChanged>
  ): void;

  once(event: "BeaconUpgraded", cb: Callback<BeaconUpgraded>): void;
  once(
    event: "BeaconUpgraded",
    options: EventOptions,
    cb: Callback<BeaconUpgraded>
  ): void;

  once(event: "Claim", cb: Callback<Claim>): void;
  once(event: "Claim", options: EventOptions, cb: Callback<Claim>): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "Lock", cb: Callback<Lock>): void;
  once(event: "Lock", options: EventOptions, cb: Callback<Lock>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Unlock", cb: Callback<Unlock>): void;
  once(event: "Unlock", options: EventOptions, cb: Callback<Unlock>): void;

  once(event: "Upgraded", cb: Callback<Upgraded>): void;
  once(event: "Upgraded", options: EventOptions, cb: Callback<Upgraded>): void;
}
