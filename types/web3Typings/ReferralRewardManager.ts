/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type BalanceIncrease = ContractEventLog<{
  account: string;
  amount: string;
  0: string;
  1: string;
}>;
export type CodeRegistered = ContractEventLog<{
  account: string;
  code: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Withdraw = ContractEventLog<{
  account: string;
  amount: string;
  0: string;
  1: string;
}>;

export interface ReferralRewardManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ReferralRewardManager;
  clone(): ReferralRewardManager;
  methods: {
    addToBalance(
      _referralCode: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    addressToCode(arg0: string): NonPayableTransactionObject<string>;

    adminOverride(
      _account: string,
      _code: string
    ): NonPayableTransactionObject<void>;

    balances(arg0: string): NonPayableTransactionObject<string>;

    codeToAddress(arg0: string): NonPayableTransactionObject<string>;

    creditAuction(): NonPayableTransactionObject<string>;

    emergencyWithdraw(): NonPayableTransactionObject<void>;

    isCodeRegistered(_code: string): NonPayableTransactionObject<boolean>;

    openWithdraw(): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    referralCodeOwner(
      referralCode: string
    ): NonPayableTransactionObject<string>;

    registerCode(_code: string): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setCreditAuction(_creditAuction: string): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    withdraw(_amount: number | string | BN): NonPayableTransactionObject<void>;

    withdrawOpen(): NonPayableTransactionObject<boolean>;
  };
  events: {
    BalanceIncrease(cb?: Callback<BalanceIncrease>): EventEmitter;
    BalanceIncrease(
      options?: EventOptions,
      cb?: Callback<BalanceIncrease>
    ): EventEmitter;

    CodeRegistered(cb?: Callback<CodeRegistered>): EventEmitter;
    CodeRegistered(
      options?: EventOptions,
      cb?: Callback<CodeRegistered>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "BalanceIncrease", cb: Callback<BalanceIncrease>): void;
  once(
    event: "BalanceIncrease",
    options: EventOptions,
    cb: Callback<BalanceIncrease>
  ): void;

  once(event: "CodeRegistered", cb: Callback<CodeRegistered>): void;
  once(
    event: "CodeRegistered",
    options: EventOptions,
    cb: Callback<CodeRegistered>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
